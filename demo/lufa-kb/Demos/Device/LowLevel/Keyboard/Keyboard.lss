
Keyboard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000e3e  00000ed2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  00800104  00800104  00000ed6  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000ed6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ee8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  00000f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000536d  00000000  00000000  000011a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a93  00000000  00000000  0000650d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002f55  00000000  00000000  00007fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006fc  00000000  00000000  0000aef8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002205  00000000  00000000  0000b5f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002f9c  00000000  00000000  0000d7f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003b8  00000000  00000000  00010795  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	b6 c0       	rjmp	.+364    	; 0x16e <__ctors_end>
   2:	00 00       	nop
   4:	cf c0       	rjmp	.+414    	; 0x1a4 <__bad_interrupt>
   6:	00 00       	nop
   8:	cd c0       	rjmp	.+410    	; 0x1a4 <__bad_interrupt>
   a:	00 00       	nop
   c:	cb c0       	rjmp	.+406    	; 0x1a4 <__bad_interrupt>
   e:	00 00       	nop
  10:	c9 c0       	rjmp	.+402    	; 0x1a4 <__bad_interrupt>
  12:	00 00       	nop
  14:	c7 c0       	rjmp	.+398    	; 0x1a4 <__bad_interrupt>
  16:	00 00       	nop
  18:	c5 c0       	rjmp	.+394    	; 0x1a4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	c3 c0       	rjmp	.+390    	; 0x1a4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	c1 c0       	rjmp	.+386    	; 0x1a4 <__bad_interrupt>
  22:	00 00       	nop
  24:	bf c0       	rjmp	.+382    	; 0x1a4 <__bad_interrupt>
  26:	00 00       	nop
  28:	bc c4       	rjmp	.+2424   	; 0x9a2 <__vector_10>
  2a:	00 00       	nop
  2c:	bb c0       	rjmp	.+374    	; 0x1a4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	b9 c0       	rjmp	.+370    	; 0x1a4 <__bad_interrupt>
  32:	00 00       	nop
  34:	b7 c0       	rjmp	.+366    	; 0x1a4 <__bad_interrupt>
  36:	00 00       	nop
  38:	b5 c0       	rjmp	.+362    	; 0x1a4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	b3 c0       	rjmp	.+358    	; 0x1a4 <__bad_interrupt>
  3e:	00 00       	nop
  40:	b1 c0       	rjmp	.+354    	; 0x1a4 <__bad_interrupt>
  42:	00 00       	nop
  44:	af c0       	rjmp	.+350    	; 0x1a4 <__bad_interrupt>
  46:	00 00       	nop
  48:	ad c0       	rjmp	.+346    	; 0x1a4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	ab c0       	rjmp	.+342    	; 0x1a4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	a9 c0       	rjmp	.+338    	; 0x1a4 <__bad_interrupt>
  52:	00 00       	nop
  54:	a7 c0       	rjmp	.+334    	; 0x1a4 <__bad_interrupt>
  56:	00 00       	nop
  58:	a5 c0       	rjmp	.+330    	; 0x1a4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	a3 c0       	rjmp	.+326    	; 0x1a4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	a1 c0       	rjmp	.+322    	; 0x1a4 <__bad_interrupt>
  62:	00 00       	nop
  64:	9f c0       	rjmp	.+318    	; 0x1a4 <__bad_interrupt>
  66:	00 00       	nop
  68:	9d c0       	rjmp	.+314    	; 0x1a4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	9b c0       	rjmp	.+310    	; 0x1a4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	99 c0       	rjmp	.+306    	; 0x1a4 <__bad_interrupt>
  72:	00 00       	nop
  74:	97 c0       	rjmp	.+302    	; 0x1a4 <__bad_interrupt>
  76:	00 00       	nop
  78:	95 c0       	rjmp	.+298    	; 0x1a4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	93 c0       	rjmp	.+294    	; 0x1a4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	91 c0       	rjmp	.+290    	; 0x1a4 <__bad_interrupt>
  82:	00 00       	nop
  84:	8f c0       	rjmp	.+286    	; 0x1a4 <__bad_interrupt>
  86:	00 00       	nop
  88:	8d c0       	rjmp	.+282    	; 0x1a4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	8b c0       	rjmp	.+278    	; 0x1a4 <__bad_interrupt>
  8e:	00 00       	nop
  90:	89 c0       	rjmp	.+274    	; 0x1a4 <__bad_interrupt>
  92:	00 00       	nop
  94:	87 c0       	rjmp	.+270    	; 0x1a4 <__bad_interrupt>
  96:	00 00       	nop
  98:	85 c0       	rjmp	.+266    	; 0x1a4 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	83 c0       	rjmp	.+262    	; 0x1a4 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	81 c0       	rjmp	.+258    	; 0x1a4 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	7f c0       	rjmp	.+254    	; 0x1a4 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	7d c0       	rjmp	.+250    	; 0x1a4 <__bad_interrupt>
  aa:	00 00       	nop

000000ac <ProductString>:
  ac:	26 03 4c 00 55 00 46 00 41 00 20 00 4b 00 65 00     &.L.U.F.A. .K.e.
  bc:	79 00 62 00 6f 00 61 00 72 00 64 00 20 00 44 00     y.b.o.a.r.d. .D.
  cc:	65 00 6d 00 6f 00 00 00                             e.m.o...

000000d4 <ManufacturerString>:
  d4:	1a 03 4c 00 55 00 46 00 41 00 20 00 4c 00 69 00     ..L.U.F.A. .L.i.
  e4:	62 00 72 00 61 00 72 00 79 00 00 00                 b.r.a.r.y...

000000f0 <LanguageString>:
  f0:	04 03 09 04                                         ....

000000f4 <ConfigurationDescriptor>:
  f4:	09 02 29 00 01 01 00 c0 32 09 04 00 00 02 03 01     ..).....2.......
 104:	01 00 09 21 11 01 00 01 22 3f 00 07 05 81 03 08     ...!...."?......
 114:	00 05 07 05 02 03 08 00 05                          .........

0000011d <DeviceDescriptor>:
 11d:	12 01 10 01 00 00 00 08 eb 03 42 20 01 00 01 02     ..........B ....
 12d:	00 01                                               ..

0000012f <KeyboardReport>:
 12f:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
 13f:	75 01 95 08 81 02 95 01 75 08 81 01 05 08 19 01     u.......u.......
 14f:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 15 00     )...u.....u.....
 15f:	25 65 05 07 19 00 29 65 95 06 75 08 81 00 c0        %e....)e..u....

0000016e <__ctors_end>:
 16e:	11 24       	eor	r1, r1
 170:	1f be       	out	0x3f, r1	; 63
 172:	cf ef       	ldi	r28, 0xFF	; 255
 174:	da e0       	ldi	r29, 0x0A	; 10
 176:	de bf       	out	0x3e, r29	; 62
 178:	cd bf       	out	0x3d, r28	; 61

0000017a <__do_copy_data>:
 17a:	11 e0       	ldi	r17, 0x01	; 1
 17c:	a0 e0       	ldi	r26, 0x00	; 0
 17e:	b1 e0       	ldi	r27, 0x01	; 1
 180:	ee e3       	ldi	r30, 0x3E	; 62
 182:	fe e0       	ldi	r31, 0x0E	; 14
 184:	02 c0       	rjmp	.+4      	; 0x18a <__do_copy_data+0x10>
 186:	05 90       	lpm	r0, Z+
 188:	0d 92       	st	X+, r0
 18a:	a4 30       	cpi	r26, 0x04	; 4
 18c:	b1 07       	cpc	r27, r17
 18e:	d9 f7       	brne	.-10     	; 0x186 <__do_copy_data+0xc>

00000190 <__do_clear_bss>:
 190:	21 e0       	ldi	r18, 0x01	; 1
 192:	a4 e0       	ldi	r26, 0x04	; 4
 194:	b1 e0       	ldi	r27, 0x01	; 1
 196:	01 c0       	rjmp	.+2      	; 0x19a <.do_clear_bss_start>

00000198 <.do_clear_bss_loop>:
 198:	1d 92       	st	X+, r1

0000019a <.do_clear_bss_start>:
 19a:	ab 31       	cpi	r26, 0x1B	; 27
 19c:	b2 07       	cpc	r27, r18
 19e:	e1 f7       	brne	.-8      	; 0x198 <.do_clear_bss_loop>
 1a0:	cb d1       	rcall	.+918    	; 0x538 <main>
 1a2:	4b c6       	rjmp	.+3222   	; 0xe3a <_exit>

000001a4 <__bad_interrupt>:
 1a4:	2d cf       	rjmp	.-422    	; 0x0 <__vectors>

000001a6 <LEDs_SetAllLEDs>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_SetAllLEDs(const uint8_t LEDMask)
			{
				PORTD = ((PORTD & ~LEDS_ALL_LEDS) | LEDMask);
 1a6:	9b b1       	in	r25, 0x0b	; 11
 1a8:	9f 70       	andi	r25, 0x0F	; 15
 1aa:	89 2b       	or	r24, r25
 1ac:	8b b9       	out	0x0b, r24	; 11
 1ae:	08 95       	ret

000001b0 <SetupHardware>:
/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
#if (ARCH == ARCH_AVR8)
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
 1b0:	84 b7       	in	r24, 0x34	; 52
 1b2:	87 7f       	andi	r24, 0xF7	; 247
 1b4:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	f8 94       	cli
 1ba:	a8 95       	wdr
 1bc:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1c0:	88 61       	ori	r24, 0x18	; 24
 1c2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 1c6:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ca:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	80 e8       	ldi	r24, 0x80	; 128
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	f8 94       	cli
 1d4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1d8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1dc:	0f be       	out	0x3f, r0	; 63

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Joystick_Init(void)
			{
				DDRB  &= ~JOY_BMASK;
 1de:	84 b1       	in	r24, 0x04	; 4
 1e0:	8f 71       	andi	r24, 0x1F	; 31
 1e2:	84 b9       	out	0x04, r24	; 4
				DDRE  &= ~JOY_EMASK;
 1e4:	8d b1       	in	r24, 0x0d	; 13
 1e6:	8f 7c       	andi	r24, 0xCF	; 207
 1e8:	8d b9       	out	0x0d, r24	; 13

				PORTB |=  JOY_BMASK;
 1ea:	85 b1       	in	r24, 0x05	; 5
 1ec:	80 6e       	ori	r24, 0xE0	; 224
 1ee:	85 b9       	out	0x05, r24	; 5
				PORTE |=  JOY_EMASK;
 1f0:	8e b1       	in	r24, 0x0e	; 14
 1f2:	80 63       	ori	r24, 0x30	; 48
 1f4:	8e b9       	out	0x0e, r24	; 14

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |=  LEDS_ALL_LEDS;
 1f6:	8a b1       	in	r24, 0x0a	; 10
 1f8:	80 6f       	ori	r24, 0xF0	; 240
 1fa:	8a b9       	out	0x0a, r24	; 10
				PORTD &= ~LEDS_ALL_LEDS;
 1fc:	8b b1       	in	r24, 0x0b	; 11
 1fe:	8f 70       	andi	r24, 0x0F	; 15
 200:	8b b9       	out	0x0b, r24	; 11
#endif

	/* Hardware Initialization */
	Joystick_Init();
	LEDs_Init();
	USB_Init();
 202:	b2 d3       	rcall	.+1892   	; 0x968 <USB_Init>

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void Buttons_Init(void)
			{
				DDRE  &= ~BUTTONS_BUTTON1;
 204:	6a 98       	cbi	0x0d, 2	; 13
				PORTE |=  BUTTONS_BUTTON1;
 206:	72 9a       	sbi	0x0e, 2	; 14
 208:	08 95       	ret

0000020a <EVENT_USB_Device_Connect>:
 *  starts the library USB task to begin the enumeration and USB management process.
 */
void EVENT_USB_Device_Connect(void)
{
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
 20a:	80 ea       	ldi	r24, 0xA0	; 160
 20c:	cc df       	rcall	.-104    	; 0x1a6 <LEDs_SetAllLEDs>

	/* Default to report protocol on connect */
	UsingReportProtocol = true;
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <UsingReportProtocol>
 214:	08 95       	ret

00000216 <EVENT_USB_Device_Disconnect>:
 *  the status LEDs.
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 216:	80 e1       	ldi	r24, 0x10	; 16
 218:	c6 cf       	rjmp	.-116    	; 0x1a6 <LEDs_SetAllLEDs>

0000021a <EVENT_USB_Device_ConfigurationChanged>:

/** Event handler for the USB_ConfigurationChanged event. This is fired when the host sets the current configuration
 *  of the USB device after enumeration, and configures the keyboard device endpoints.
 */
void EVENT_USB_Device_ConfigurationChanged(void)
{
 21a:	cf 93       	push	r28
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 21c:	42 e0       	ldi	r20, 0x02	; 2
 21e:	61 ec       	ldi	r22, 0xC1	; 193
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	db d2       	rcall	.+1462   	; 0x7da <Endpoint_ConfigureEndpoint_Prv>
 224:	c8 2f       	mov	r28, r24
 226:	42 e0       	ldi	r20, 0x02	; 2
 228:	60 ec       	ldi	r22, 0xC0	; 192
 22a:	82 e0       	ldi	r24, 0x02	; 2
 22c:	d6 d2       	rcall	.+1452   	; 0x7da <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
 22e:	90 91 e2 00 	lds	r25, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 232:	94 60       	ori	r25, 0x04	; 4
 234:	90 93 e2 00 	sts	0x00E2, r25	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>

	/* Turn on Start-of-Frame events for tracking HID report period expiry */
	USB_Device_EnableSOFEvents();

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 238:	88 23       	and	r24, r24
 23a:	11 f0       	breq	.+4      	; 0x240 <EVENT_USB_Device_ConfigurationChanged+0x26>
 23c:	c1 11       	cpse	r28, r1
 23e:	02 c0       	rjmp	.+4      	; 0x244 <EVENT_USB_Device_ConfigurationChanged+0x2a>
 240:	80 e9       	ldi	r24, 0x90	; 144
 242:	01 c0       	rjmp	.+2      	; 0x246 <EVENT_USB_Device_ConfigurationChanged+0x2c>
}
 244:	80 e6       	ldi	r24, 0x60	; 96

	/* Turn on Start-of-Frame events for tracking HID report period expiry */
	USB_Device_EnableSOFEvents();

	/* Indicate endpoint configuration success or failure */
	LEDs_SetAllLEDs(ConfigSuccess ? LEDMASK_USB_READY : LEDMASK_USB_ERROR);
 246:	cf 91       	pop	r28
 248:	ae cf       	rjmp	.-164    	; 0x1a6 <LEDs_SetAllLEDs>

0000024a <EVENT_USB_Device_StartOfFrame>:

/** Event handler for the USB device Start Of Frame event. */
void EVENT_USB_Device_StartOfFrame(void)
{
	/* One millisecond has elapsed, decrement the idle time remaining counter if it has not already elapsed */
	if (IdleMSRemaining)
 24a:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <IdleMSRemaining>
 24e:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <IdleMSRemaining+0x1>
 252:	00 97       	sbiw	r24, 0x00	; 0
 254:	29 f0       	breq	.+10     	; 0x260 <EVENT_USB_Device_StartOfFrame+0x16>
	  IdleMSRemaining--;
 256:	01 97       	sbiw	r24, 0x01	; 1
 258:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <IdleMSRemaining+0x1>
 25c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <IdleMSRemaining>
 260:	08 95       	ret

00000262 <CreateKeyboardReport>:
/** Fills the given HID report data structure with the next HID report to send to the host.
 *
 *  \param[out] ReportData  Pointer to a HID report data structure to be filled
 */
void CreateKeyboardReport(USB_KeyboardReport_Data_t* const ReportData)
{
 262:	fc 01       	movw	r30, r24
			}

			static inline uint8_t Joystick_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Joystick_GetStatus(void)
			{
				return (((uint8_t)~PINB & JOY_BMASK) | (((uint8_t)~PINE & JOY_EMASK) >> JOY_PORTE_MASK_SHIFT));
 264:	93 b1       	in	r25, 0x03	; 3
 266:	2c b1       	in	r18, 0x0c	; 12
 268:	20 95       	com	r18
 26a:	20 73       	andi	r18, 0x30	; 48
 26c:	26 95       	lsr	r18
 26e:	90 95       	com	r25
 270:	90 7e       	andi	r25, 0xE0	; 224
 272:	29 2b       	or	r18, r25
			}

			static inline uint8_t Buttons_GetStatus(void) ATTR_WARN_UNUSED_RESULT;
			static inline uint8_t Buttons_GetStatus(void)
			{
				return ((PINE & BUTTONS_BUTTON1) ^ BUTTONS_BUTTON1);
 274:	8c b1       	in	r24, 0x0c	; 12
 276:	80 95       	com	r24
	uint8_t ButtonStatus_LCL  = Buttons_GetStatus();

	uint8_t UsedKeyCodes      = 0;

	/* Clear the report contents */
	memset(ReportData, 0, sizeof(USB_KeyboardReport_Data_t));
 278:	98 e0       	ldi	r25, 0x08	; 8
 27a:	df 01       	movw	r26, r30
 27c:	1d 92       	st	X+, r1
 27e:	9a 95       	dec	r25
 280:	e9 f7       	brne	.-6      	; 0x27c <CreateKeyboardReport+0x1a>

	/* Make sent key uppercase by indicating that the left shift key is pressed */
	ReportData->Modifier = HID_KEYBOARD_MODIFIER_LEFTSHIFT;
 282:	92 e0       	ldi	r25, 0x02	; 2
 284:	90 83       	st	Z, r25

	if (JoyStatus_LCL & JOY_UP)
 286:	27 ff       	sbrs	r18, 7
 288:	02 c0       	rjmp	.+4      	; 0x28e <CreateKeyboardReport+0x2c>
	  ReportData->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_A;
 28a:	94 e0       	ldi	r25, 0x04	; 4
 28c:	03 c0       	rjmp	.+6      	; 0x294 <CreateKeyboardReport+0x32>
	else if (JoyStatus_LCL & JOY_DOWN)
 28e:	24 ff       	sbrs	r18, 4
 290:	04 c0       	rjmp	.+8      	; 0x29a <CreateKeyboardReport+0x38>
	  ReportData->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_B;
 292:	95 e0       	ldi	r25, 0x05	; 5
 294:	92 83       	std	Z+2, r25	; 0x02
 296:	91 e0       	ldi	r25, 0x01	; 1
 298:	01 c0       	rjmp	.+2      	; 0x29c <CreateKeyboardReport+0x3a>
void CreateKeyboardReport(USB_KeyboardReport_Data_t* const ReportData)
{
	uint8_t JoyStatus_LCL     = Joystick_GetStatus();
	uint8_t ButtonStatus_LCL  = Buttons_GetStatus();

	uint8_t UsedKeyCodes      = 0;
 29a:	90 e0       	ldi	r25, 0x00	; 0
	if (JoyStatus_LCL & JOY_UP)
	  ReportData->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_A;
	else if (JoyStatus_LCL & JOY_DOWN)
	  ReportData->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_B;

	if (JoyStatus_LCL & JOY_LEFT)
 29c:	26 ff       	sbrs	r18, 6
 29e:	05 c0       	rjmp	.+10     	; 0x2aa <CreateKeyboardReport+0x48>
	  ReportData->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_C;
 2a0:	df 01       	movw	r26, r30
 2a2:	a9 0f       	add	r26, r25
 2a4:	b1 1d       	adc	r27, r1
 2a6:	36 e0       	ldi	r19, 0x06	; 6
 2a8:	06 c0       	rjmp	.+12     	; 0x2b6 <CreateKeyboardReport+0x54>
	else if (JoyStatus_LCL & JOY_RIGHT)
 2aa:	23 ff       	sbrs	r18, 3
 2ac:	07 c0       	rjmp	.+14     	; 0x2bc <CreateKeyboardReport+0x5a>
	  ReportData->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_D;
 2ae:	df 01       	movw	r26, r30
 2b0:	a9 0f       	add	r26, r25
 2b2:	b1 1d       	adc	r27, r1
 2b4:	37 e0       	ldi	r19, 0x07	; 7
 2b6:	12 96       	adiw	r26, 0x02	; 2
 2b8:	3c 93       	st	X, r19
 2ba:	9f 5f       	subi	r25, 0xFF	; 255

	if (JoyStatus_LCL & JOY_PRESS)
 2bc:	25 ff       	sbrs	r18, 5
 2be:	07 c0       	rjmp	.+14     	; 0x2ce <CreateKeyboardReport+0x6c>
	  ReportData->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_E;
 2c0:	df 01       	movw	r26, r30
 2c2:	a9 0f       	add	r26, r25
 2c4:	b1 1d       	adc	r27, r1
 2c6:	28 e0       	ldi	r18, 0x08	; 8
 2c8:	12 96       	adiw	r26, 0x02	; 2
 2ca:	2c 93       	st	X, r18
 2cc:	9f 5f       	subi	r25, 0xFF	; 255

	if (ButtonStatus_LCL & BUTTONS_BUTTON1)
 2ce:	82 ff       	sbrs	r24, 2
 2d0:	04 c0       	rjmp	.+8      	; 0x2da <CreateKeyboardReport+0x78>
	  ReportData->KeyCode[UsedKeyCodes++] = HID_KEYBOARD_SC_F;
 2d2:	e9 0f       	add	r30, r25
 2d4:	f1 1d       	adc	r31, r1
 2d6:	89 e0       	ldi	r24, 0x09	; 9
 2d8:	82 83       	std	Z+2, r24	; 0x02
 2da:	08 95       	ret

000002dc <ProcessLEDReport>:
/** Processes a received LED report, and updates the board LEDs states to match.
 *
 *  \param[in] LEDReport  LED status report from the host
 */
void ProcessLEDReport(const uint8_t LEDReport)
{
 2dc:	98 2f       	mov	r25, r24
	uint8_t LEDMask = LEDS_LED2;

	if (LEDReport & HID_KEYBOARD_LED_NUMLOCK)
 2de:	80 ff       	sbrs	r24, 0
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <ProcessLEDReport+0xa>
	  LEDMask |= LEDS_LED1;
 2e2:	80 e3       	ldi	r24, 0x30	; 48
 2e4:	01 c0       	rjmp	.+2      	; 0x2e8 <ProcessLEDReport+0xc>
 *
 *  \param[in] LEDReport  LED status report from the host
 */
void ProcessLEDReport(const uint8_t LEDReport)
{
	uint8_t LEDMask = LEDS_LED2;
 2e6:	80 e2       	ldi	r24, 0x20	; 32

	if (LEDReport & HID_KEYBOARD_LED_NUMLOCK)
	  LEDMask |= LEDS_LED1;

	if (LEDReport & HID_KEYBOARD_LED_CAPSLOCK)
 2e8:	91 fd       	sbrc	r25, 1
	  LEDMask |= LEDS_LED3;
 2ea:	80 68       	ori	r24, 0x80	; 128

	if (LEDReport & HID_KEYBOARD_LED_SCROLLLOCK)
 2ec:	92 fd       	sbrc	r25, 2
	  LEDMask |= LEDS_LED4;
 2ee:	80 64       	ori	r24, 0x40	; 64

	/* Set the status LEDs to the current Keyboard LED status */
	LEDs_SetAllLEDs(LEDMask);
 2f0:	5a cf       	rjmp	.-332    	; 0x1a6 <LEDs_SetAllLEDs>

000002f2 <EVENT_USB_Device_ControlRequest>:
/** Event handler for the USB_ControlRequest event. This is used to catch and process control requests sent to
 *  the device from the USB host before passing along unhandled control requests to the library for processing
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
 2f2:	1f 93       	push	r17
 2f4:	cf 93       	push	r28
 2f6:	df 93       	push	r29
 2f8:	cd b7       	in	r28, 0x3d	; 61
 2fa:	de b7       	in	r29, 0x3e	; 62
 2fc:	28 97       	sbiw	r28, 0x08	; 8
 2fe:	0f b6       	in	r0, 0x3f	; 63
 300:	f8 94       	cli
 302:	de bf       	out	0x3e, r29	; 62
 304:	0f be       	out	0x3f, r0	; 63
 306:	cd bf       	out	0x3d, r28	; 61
	/* Handle HID Class specific requests */
	switch (USB_ControlRequest.bRequest)
 308:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <USB_ControlRequest+0x1>
 30c:	83 30       	cpi	r24, 0x03	; 3
 30e:	09 f4       	brne	.+2      	; 0x312 <EVENT_USB_Device_ControlRequest+0x20>
 310:	47 c0       	rjmp	.+142    	; 0x3a0 <EVENT_USB_Device_ControlRequest+0xae>
 312:	30 f4       	brcc	.+12     	; 0x320 <EVENT_USB_Device_ControlRequest+0x2e>
 314:	81 30       	cpi	r24, 0x01	; 1
 316:	71 f0       	breq	.+28     	; 0x334 <EVENT_USB_Device_ControlRequest+0x42>
 318:	82 30       	cpi	r24, 0x02	; 2
 31a:	09 f4       	brne	.+2      	; 0x31e <EVENT_USB_Device_ControlRequest+0x2c>
 31c:	7d c0       	rjmp	.+250    	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
 31e:	95 c0       	rjmp	.+298    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 320:	8a 30       	cpi	r24, 0x0A	; 10
 322:	09 f4       	brne	.+2      	; 0x326 <EVENT_USB_Device_ControlRequest+0x34>
 324:	60 c0       	rjmp	.+192    	; 0x3e6 <EVENT_USB_Device_ControlRequest+0xf4>
 326:	8b 30       	cpi	r24, 0x0B	; 11
 328:	09 f4       	brne	.+2      	; 0x32c <EVENT_USB_Device_ControlRequest+0x3a>
 32a:	47 c0       	rjmp	.+142    	; 0x3ba <EVENT_USB_Device_ControlRequest+0xc8>
 32c:	89 30       	cpi	r24, 0x09	; 9
 32e:	09 f0       	breq	.+2      	; 0x332 <EVENT_USB_Device_ControlRequest+0x40>
 330:	8c c0       	rjmp	.+280    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 332:	18 c0       	rjmp	.+48     	; 0x364 <EVENT_USB_Device_ControlRequest+0x72>
	{
		case HID_REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 334:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <USB_ControlRequest>
 338:	81 3a       	cpi	r24, 0xA1	; 161
 33a:	09 f0       	breq	.+2      	; 0x33e <EVENT_USB_Device_ControlRequest+0x4c>
 33c:	86 c0       	rjmp	.+268    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
			{
				USB_KeyboardReport_Data_t KeyboardReportData;

				/* Create the next keyboard report for transmission to the host */
				CreateKeyboardReport(&KeyboardReportData);
 33e:	ce 01       	movw	r24, r28
 340:	01 96       	adiw	r24, 0x01	; 1
 342:	8f df       	rcall	.-226    	; 0x262 <CreateKeyboardReport>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 344:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 348:	87 7f       	andi	r24, 0xF7	; 247
 34a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

				Endpoint_ClearSETUP();

				/* Write the report data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(&KeyboardReportData, sizeof(KeyboardReportData));
 34e:	68 e0       	ldi	r22, 0x08	; 8
 350:	70 e0       	ldi	r23, 0x00	; 0
 352:	ce 01       	movw	r24, r28
 354:	01 96       	adiw	r24, 0x01	; 1
 356:	82 d1       	rcall	.+772    	; 0x65c <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 358:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 35c:	8b 77       	andi	r24, 0x7B	; 123
 35e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 362:	73 c0       	rjmp	.+230    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
				Endpoint_ClearOUT();
			}

			break;
		case HID_REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 364:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <USB_ControlRequest>
 368:	81 32       	cpi	r24, 0x21	; 33
 36a:	09 f0       	breq	.+2      	; 0x36e <EVENT_USB_Device_ControlRequest+0x7c>
 36c:	6e c0       	rjmp	.+220    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 36e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 372:	87 7f       	andi	r24, 0xF7	; 247
 374:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 378:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			{
				Endpoint_ClearSETUP();

				/* Wait until the LED report has been sent by the host */
				while (!(Endpoint_IsOUTReceived()))
 37c:	82 fd       	sbrc	r24, 2
 37e:	05 c0       	rjmp	.+10     	; 0x38a <EVENT_USB_Device_ControlRequest+0x98>
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
 380:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <USB_DeviceState>
 384:	81 11       	cpse	r24, r1
 386:	f8 cf       	rjmp	.-16     	; 0x378 <EVENT_USB_Device_ControlRequest+0x86>
 388:	60 c0       	rjmp	.+192    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 38a:	10 91 f1 00 	lds	r17, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 38e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 392:	8b 77       	andi	r24, 0x7B	; 123
 394:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();

				/* Process the incoming LED report */
				ProcessLEDReport(LEDStatus);
 398:	55 d2       	rcall	.+1194   	; 0x844 <Endpoint_ClearStatusStage>
 39a:	81 2f       	mov	r24, r17
 39c:	9f df       	rcall	.-194    	; 0x2dc <ProcessLEDReport>
 39e:	55 c0       	rjmp	.+170    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
			}

			break;
		case HID_REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 3a0:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <USB_ControlRequest>
 3a4:	81 3a       	cpi	r24, 0xA1	; 161
 3a6:	09 f0       	breq	.+2      	; 0x3aa <EVENT_USB_Device_ControlRequest+0xb8>
 3a8:	50 c0       	rjmp	.+160    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 3aa:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 3ae:	87 7f       	andi	r24, 0xF7	; 247
 3b0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			{
				Endpoint_ClearSETUP();

				/* Write the current protocol flag to the host */
				Endpoint_Write_8(UsingReportProtocol);
 3b4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <UsingReportProtocol>
 3b8:	40 c0       	rjmp	.+128    	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
				Endpoint_ClearStatusStage();
			}

			break;
		case HID_REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 3ba:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <USB_ControlRequest>
 3be:	81 32       	cpi	r24, 0x21	; 33
 3c0:	09 f0       	breq	.+2      	; 0x3c4 <EVENT_USB_Device_ControlRequest+0xd2>
 3c2:	43 c0       	rjmp	.+134    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 3c4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 3c8:	87 7f       	andi	r24, 0xF7	; 247
 3ca:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 3ce:	3a d2       	rcall	.+1140   	; 0x844 <Endpoint_ClearStatusStage>

				/* Set or clear the flag depending on what the host indicates that the current Protocol should be */
				UsingReportProtocol = (USB_ControlRequest.wValue != 0);
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <USB_ControlRequest+0x2>
 3d6:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <USB_ControlRequest+0x3>
 3da:	23 2b       	or	r18, r19
 3dc:	09 f4       	brne	.+2      	; 0x3e0 <EVENT_USB_Device_ControlRequest+0xee>
 3de:	80 e0       	ldi	r24, 0x00	; 0
 3e0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <UsingReportProtocol>
 3e4:	32 c0       	rjmp	.+100    	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
			}

			break;
		case HID_REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 3e6:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <USB_ControlRequest>
 3ea:	81 32       	cpi	r24, 0x21	; 33
 3ec:	71 f5       	brne	.+92     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 3ee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 3f2:	87 7f       	andi	r24, 0xF7	; 247
 3f4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
 3f8:	25 d2       	rcall	.+1098   	; 0x844 <Endpoint_ClearStatusStage>

				/* Get idle period in MSB, IdleCount must be multiplied by 4 to get number of milliseconds */
				IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
 3fa:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <USB_ControlRequest+0x2>
 3fe:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <USB_ControlRequest+0x3>
 402:	88 27       	eor	r24, r24
 404:	36 e0       	ldi	r19, 0x06	; 6
 406:	96 95       	lsr	r25
 408:	87 95       	ror	r24
 40a:	3a 95       	dec	r19
 40c:	e1 f7       	brne	.-8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 40e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 412:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 416:	19 c0       	rjmp	.+50     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
			}

			break;
		case HID_REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 418:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <USB_ControlRequest>
 41c:	81 3a       	cpi	r24, 0xA1	; 161
 41e:	a9 f4       	brne	.+42     	; 0x44a <__LOCK_REGION_LENGTH__+0x4a>
 420:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 424:	87 7f       	andi	r24, 0xF7	; 247
 426:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			{
				Endpoint_ClearSETUP();

				/* Write the current idle duration to the host, must be divided by 4 before sent to host */
				Endpoint_Write_8(IdleCount >> 2);
 42a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 42e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 432:	96 95       	lsr	r25
 434:	87 95       	ror	r24
 436:	96 95       	lsr	r25
 438:	87 95       	ror	r24
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 43a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 43e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 442:	8e 77       	andi	r24, 0x7E	; 126
 444:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
 448:	fd d1       	rcall	.+1018   	; 0x844 <Endpoint_ClearStatusStage>
			}

			break;
	}
}
 44a:	28 96       	adiw	r28, 0x08	; 8
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	f8 94       	cli
 450:	de bf       	out	0x3e, r29	; 62
 452:	0f be       	out	0x3f, r0	; 63
 454:	cd bf       	out	0x3d, r28	; 61
 456:	df 91       	pop	r29
 458:	cf 91       	pop	r28
 45a:	1f 91       	pop	r17
 45c:	08 95       	ret

0000045e <SendNextReport>:
	LEDs_SetAllLEDs(LEDMask);
}

/** Sends the next HID report to the host, via the keyboard data endpoint. */
void SendNextReport(void)
{
 45e:	cf 93       	push	r28
 460:	df 93       	push	r29
 462:	cd b7       	in	r28, 0x3d	; 61
 464:	de b7       	in	r29, 0x3e	; 62
 466:	28 97       	sbiw	r28, 0x08	; 8
 468:	0f b6       	in	r0, 0x3f	; 63
 46a:	f8 94       	cli
 46c:	de bf       	out	0x3e, r29	; 62
 46e:	0f be       	out	0x3f, r0	; 63
 470:	cd bf       	out	0x3d, r28	; 61
	static USB_KeyboardReport_Data_t PrevKeyboardReportData;
	USB_KeyboardReport_Data_t        KeyboardReportData;
	bool                             SendReport = false;

	/* Create the next keyboard report for transmission to the host */
	CreateKeyboardReport(&KeyboardReportData);
 472:	ce 01       	movw	r24, r28
 474:	01 96       	adiw	r24, 0x01	; 1
 476:	f5 de       	rcall	.-534    	; 0x262 <CreateKeyboardReport>

	/* Check if the idle period is set and has elapsed */
	if (IdleCount && (!(IdleMSRemaining)))
 478:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 47c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 480:	00 97       	sbiw	r24, 0x00	; 0
 482:	61 f0       	breq	.+24     	; 0x49c <SendNextReport+0x3e>
 484:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <IdleMSRemaining>
 488:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <IdleMSRemaining+0x1>
 48c:	23 2b       	or	r18, r19
 48e:	31 f4       	brne	.+12     	; 0x49c <SendNextReport+0x3e>
	{
		/* Reset the idle time remaining counter */
		IdleMSRemaining = IdleCount;
 490:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <IdleMSRemaining+0x1>
 494:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <IdleMSRemaining>

		/* Idle period is set and has elapsed, must send a report to the host */
		SendReport = true;
 498:	21 e0       	ldi	r18, 0x01	; 1
 49a:	0c c0       	rjmp	.+24     	; 0x4b4 <SendNextReport+0x56>
	}
	else
	{
		/* Check to see if the report data has changed - if so a report MUST be sent */
		SendReport = (memcmp(&PrevKeyboardReportData, &KeyboardReportData, sizeof(USB_KeyboardReport_Data_t)) != 0);
 49c:	48 e0       	ldi	r20, 0x08	; 8
 49e:	50 e0       	ldi	r21, 0x00	; 0
 4a0:	be 01       	movw	r22, r28
 4a2:	6f 5f       	subi	r22, 0xFF	; 255
 4a4:	7f 4f       	sbci	r23, 0xFF	; 255
 4a6:	84 e0       	ldi	r24, 0x04	; 4
 4a8:	91 e0       	ldi	r25, 0x01	; 1
 4aa:	ba d4       	rcall	.+2420   	; 0xe20 <memcmp>
 4ac:	21 e0       	ldi	r18, 0x01	; 1
 4ae:	89 2b       	or	r24, r25
 4b0:	09 f4       	brne	.+2      	; 0x4b4 <SendNextReport+0x56>
 4b2:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 4ba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

	/* Select the Keyboard Report Endpoint */
	Endpoint_SelectEndpoint(KEYBOARD_IN_EPADDR);

	/* Check if Keyboard Endpoint Ready for Read/Write and if we should send a new report */
	if (Endpoint_IsReadWriteAllowed() && SendReport)
 4be:	85 ff       	sbrs	r24, 5
 4c0:	17 c0       	rjmp	.+46     	; 0x4f0 <SendNextReport+0x92>
 4c2:	22 23       	and	r18, r18
 4c4:	a9 f0       	breq	.+42     	; 0x4f0 <SendNextReport+0x92>
	{
		/* Save the current report data for later comparison to check for changes */
		PrevKeyboardReportData = KeyboardReportData;
 4c6:	88 e0       	ldi	r24, 0x08	; 8
 4c8:	fe 01       	movw	r30, r28
 4ca:	31 96       	adiw	r30, 0x01	; 1
 4cc:	a4 e0       	ldi	r26, 0x04	; 4
 4ce:	b1 e0       	ldi	r27, 0x01	; 1
 4d0:	01 90       	ld	r0, Z+
 4d2:	0d 92       	st	X+, r0
 4d4:	8a 95       	dec	r24
 4d6:	e1 f7       	brne	.-8      	; 0x4d0 <SendNextReport+0x72>

		/* Write Keyboard Report Data */
		Endpoint_Write_Stream_LE(&KeyboardReportData, sizeof(KeyboardReportData), NULL);
 4d8:	40 e0       	ldi	r20, 0x00	; 0
 4da:	50 e0       	ldi	r21, 0x00	; 0
 4dc:	68 e0       	ldi	r22, 0x08	; 8
 4de:	70 e0       	ldi	r23, 0x00	; 0
 4e0:	ce 01       	movw	r24, r28
 4e2:	01 96       	adiw	r24, 0x01	; 1
 4e4:	71 d0       	rcall	.+226    	; 0x5c8 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 4e6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 4ea:	8e 77       	andi	r24, 0x7E	; 126
 4ec:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

		/* Finalize the stream transfer to send the last packet */
		Endpoint_ClearIN();
	}
}
 4f0:	28 96       	adiw	r28, 0x08	; 8
 4f2:	0f b6       	in	r0, 0x3f	; 63
 4f4:	f8 94       	cli
 4f6:	de bf       	out	0x3e, r29	; 62
 4f8:	0f be       	out	0x3f, r0	; 63
 4fa:	cd bf       	out	0x3d, r28	; 61
 4fc:	df 91       	pop	r29
 4fe:	cf 91       	pop	r28
 500:	08 95       	ret

00000502 <ReceiveNextReport>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 502:	82 e0       	ldi	r24, 0x02	; 2
 504:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 508:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
{
	/* Select the Keyboard LED Report Endpoint */
	Endpoint_SelectEndpoint(KEYBOARD_OUT_EPADDR);

	/* Check if Keyboard LED Endpoint contains a packet */
	if (Endpoint_IsOUTReceived())
 50c:	82 ff       	sbrs	r24, 2
 50e:	0c c0       	rjmp	.+24     	; 0x528 <ReceiveNextReport+0x26>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 510:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	{
		/* Check to see if the packet contains data */
		if (Endpoint_IsReadWriteAllowed())
 514:	85 ff       	sbrs	r24, 5
 516:	03 c0       	rjmp	.+6      	; 0x51e <ReceiveNextReport+0x1c>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 518:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
		{
			/* Read in the LED report from the host */
			uint8_t LEDReport = Endpoint_Read_8();

			/* Process the read LED report from the host */
			ProcessLEDReport(LEDReport);
 51c:	df de       	rcall	.-578    	; 0x2dc <ProcessLEDReport>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 51e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 522:	8b 77       	andi	r24, 0x7B	; 123
 524:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 528:	08 95       	ret

0000052a <HID_Task>:

/** Function to manage HID report generation and transmission to the host, when in report mode. */
void HID_Task(void)
{
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
 52a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <USB_DeviceState>
 52e:	84 30       	cpi	r24, 0x04	; 4
 530:	11 f4       	brne	.+4      	; 0x536 <HID_Task+0xc>
	  return;

	/* Send the next keypress report to the host */
	SendNextReport();
 532:	95 df       	rcall	.-214    	; 0x45e <SendNextReport>

	/* Process the LED report sent from the host */
	ReceiveNextReport();
 534:	e6 cf       	rjmp	.-52     	; 0x502 <ReceiveNextReport>
 536:	08 95       	ret

00000538 <main>:
 538:	3b de       	rcall	.-906    	; 0x1b0 <SetupHardware>
 */
int main(void)
{
	SetupHardware();

	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
 53a:	80 e1       	ldi	r24, 0x10	; 16
 53c:	34 de       	rcall	.-920    	; 0x1a6 <LEDs_SetAllLEDs>
	GlobalInterruptEnable();

	for (;;)
	{
		HID_Task();
 53e:	78 94       	sei
 540:	f4 df       	rcall	.-24     	; 0x52a <HID_Task>
		USB_USBTask();
 542:	54 d4       	rcall	.+2216   	; 0xdec <USB_USBTask>
 544:	fd cf       	rjmp	.-6      	; 0x540 <main+0x8>

00000546 <CALLBACK_USB_GetDescriptor>:
 546:	29 2f       	mov	r18, r25
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 548:	33 27       	eor	r19, r19
 54a:	23 30       	cpi	r18, 0x03	; 3
 54c:	31 05       	cpc	r19, r1
 54e:	e1 f0       	breq	.+56     	; 0x588 <CALLBACK_USB_GetDescriptor+0x42>
 550:	58 f4       	brcc	.+22     	; 0x568 <CALLBACK_USB_GetDescriptor+0x22>
 552:	21 30       	cpi	r18, 0x01	; 1
 554:	31 05       	cpc	r19, r1
 556:	99 f0       	breq	.+38     	; 0x57e <CALLBACK_USB_GetDescriptor+0x38>
 558:	22 30       	cpi	r18, 0x02	; 2
 55a:	31 05       	cpc	r19, r1
 55c:	69 f5       	brne	.+90     	; 0x5b8 <CALLBACK_USB_GetDescriptor+0x72>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 55e:	89 e2       	ldi	r24, 0x29	; 41
 560:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
 562:	24 ef       	ldi	r18, 0xF4	; 244
 564:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 566:	2c c0       	rjmp	.+88     	; 0x5c0 <CALLBACK_USB_GetDescriptor+0x7a>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 568:	21 32       	cpi	r18, 0x21	; 33
 56a:	31 05       	cpc	r19, r1
 56c:	01 f1       	breq	.+64     	; 0x5ae <CALLBACK_USB_GetDescriptor+0x68>
 56e:	22 32       	cpi	r18, 0x22	; 34
 570:	31 05       	cpc	r19, r1
 572:	11 f5       	brne	.+68     	; 0x5b8 <CALLBACK_USB_GetDescriptor+0x72>
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &KeyboardReport;
			Size    = sizeof(KeyboardReport);
 574:	8f e3       	ldi	r24, 0x3F	; 63
 576:	90 e0       	ldi	r25, 0x00	; 0
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
		case HID_DTYPE_Report:
			Address = &KeyboardReport;
 578:	2f e2       	ldi	r18, 0x2F	; 47
 57a:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(KeyboardReport);
			break;
 57c:	21 c0       	rjmp	.+66     	; 0x5c0 <CALLBACK_USB_GetDescriptor+0x7a>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 57e:	82 e1       	ldi	r24, 0x12	; 18
 580:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
 582:	2d e1       	ldi	r18, 0x1D	; 29
 584:	31 e0       	ldi	r19, 0x01	; 1
 586:	1c c0       	rjmp	.+56     	; 0x5c0 <CALLBACK_USB_GetDescriptor+0x7a>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
 588:	99 27       	eor	r25, r25
 58a:	81 30       	cpi	r24, 0x01	; 1
 58c:	91 05       	cpc	r25, r1
 58e:	49 f0       	breq	.+18     	; 0x5a2 <CALLBACK_USB_GetDescriptor+0x5c>
 590:	28 f0       	brcs	.+10     	; 0x59c <CALLBACK_USB_GetDescriptor+0x56>
 592:	02 97       	sbiw	r24, 0x02	; 2
 594:	89 f4       	brne	.+34     	; 0x5b8 <CALLBACK_USB_GetDescriptor+0x72>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 596:	ec ea       	ldi	r30, 0xAC	; 172
 598:	f0 e0       	ldi	r31, 0x00	; 0
 59a:	05 c0       	rjmp	.+10     	; 0x5a6 <CALLBACK_USB_GetDescriptor+0x60>
		case DTYPE_String:
			switch (DescriptorNumber)
			{
				case STRING_ID_Language:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 59c:	e0 ef       	ldi	r30, 0xF0	; 240
 59e:	f0 e0       	ldi	r31, 0x00	; 0
 5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <CALLBACK_USB_GetDescriptor+0x60>
					break;
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 5a2:	e4 ed       	ldi	r30, 0xD4	; 212
 5a4:	f0 e0       	ldi	r31, 0x00	; 0
					break;
				case STRING_ID_Product:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 5a6:	84 91       	lpm	r24, Z
 5a8:	90 e0       	ldi	r25, 0x00	; 0
				case STRING_ID_Manufacturer:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case STRING_ID_Product:
					Address = &ProductString;
 5aa:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 5ac:	09 c0       	rjmp	.+18     	; 0x5c0 <CALLBACK_USB_GetDescriptor+0x7a>
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
			Size    = sizeof(USB_HID_Descriptor_HID_t);
 5ae:	89 e0       	ldi	r24, 0x09	; 9
 5b0:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}

			break;
		case HID_DTYPE_HID:
			Address = &ConfigurationDescriptor.HID_KeyboardHID;
 5b2:	26 e0       	ldi	r18, 0x06	; 6
 5b4:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_HID_Descriptor_HID_t);
			break;
 5b6:	04 c0       	rjmp	.+8      	; 0x5c0 <CALLBACK_USB_GetDescriptor+0x7a>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
 5b8:	80 e0       	ldi	r24, 0x00	; 0
 5ba:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
 5bc:	20 e0       	ldi	r18, 0x00	; 0
 5be:	30 e0       	ldi	r19, 0x00	; 0
			Address = &KeyboardReport;
			Size    = sizeof(KeyboardReport);
			break;
	}

	*DescriptorAddress = Address;
 5c0:	fa 01       	movw	r30, r20
 5c2:	31 83       	std	Z+1, r19	; 0x01
 5c4:	20 83       	st	Z, r18
	return Size;
}
 5c6:	08 95       	ret

000005c8 <Endpoint_Write_Stream_LE>:
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 5c8:	cf 92       	push	r12
 5ca:	df 92       	push	r13
 5cc:	ef 92       	push	r14
 5ce:	ff 92       	push	r15
 5d0:	0f 93       	push	r16
 5d2:	1f 93       	push	r17
 5d4:	cf 93       	push	r28
 5d6:	df 93       	push	r29
 5d8:	ec 01       	movw	r28, r24
 5da:	8b 01       	movw	r16, r22
 5dc:	7a 01       	movw	r14, r20
 5de:	51 d1       	rcall	.+674    	; 0x882 <Endpoint_WaitUntilReady>
 5e0:	81 11       	cpse	r24, r1
 5e2:	33 c0       	rjmp	.+102    	; 0x64a <Endpoint_Write_Stream_LE+0x82>
 5e4:	e1 14       	cp	r14, r1
 5e6:	f1 04       	cpc	r15, r1
 5e8:	39 f0       	breq	.+14     	; 0x5f8 <Endpoint_Write_Stream_LE+0x30>
 5ea:	f7 01       	movw	r30, r14
 5ec:	80 81       	ld	r24, Z
 5ee:	91 81       	ldd	r25, Z+1	; 0x01
 5f0:	08 1b       	sub	r16, r24
 5f2:	19 0b       	sbc	r17, r25
 5f4:	c8 0f       	add	r28, r24
 5f6:	d9 1f       	adc	r29, r25
 5f8:	c1 2c       	mov	r12, r1
 5fa:	d1 2c       	mov	r13, r1
 5fc:	01 15       	cp	r16, r1
 5fe:	11 05       	cpc	r17, r1
 600:	19 f1       	breq	.+70     	; 0x648 <Endpoint_Write_Stream_LE+0x80>
 602:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 606:	85 fd       	sbrc	r24, 5
 608:	16 c0       	rjmp	.+44     	; 0x636 <Endpoint_Write_Stream_LE+0x6e>
 60a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 60e:	8e 77       	andi	r24, 0x7E	; 126
 610:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 614:	eb d3       	rcall	.+2006   	; 0xdec <USB_USBTask>
 616:	e1 14       	cp	r14, r1
 618:	f1 04       	cpc	r15, r1
 61a:	49 f0       	breq	.+18     	; 0x62e <Endpoint_Write_Stream_LE+0x66>
 61c:	f7 01       	movw	r30, r14
 61e:	80 81       	ld	r24, Z
 620:	91 81       	ldd	r25, Z+1	; 0x01
 622:	c8 0e       	add	r12, r24
 624:	d9 1e       	adc	r13, r25
 626:	d1 82       	std	Z+1, r13	; 0x01
 628:	c0 82       	st	Z, r12
 62a:	85 e0       	ldi	r24, 0x05	; 5
 62c:	0e c0       	rjmp	.+28     	; 0x64a <Endpoint_Write_Stream_LE+0x82>
 62e:	29 d1       	rcall	.+594    	; 0x882 <Endpoint_WaitUntilReady>
 630:	88 23       	and	r24, r24
 632:	21 f3       	breq	.-56     	; 0x5fc <Endpoint_Write_Stream_LE+0x34>
 634:	0a c0       	rjmp	.+20     	; 0x64a <Endpoint_Write_Stream_LE+0x82>
 636:	89 91       	ld	r24, Y+
 638:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
 63c:	01 50       	subi	r16, 0x01	; 1
 63e:	11 09       	sbc	r17, r1
 640:	ff ef       	ldi	r31, 0xFF	; 255
 642:	cf 1a       	sub	r12, r31
 644:	df 0a       	sbc	r13, r31
 646:	da cf       	rjmp	.-76     	; 0x5fc <Endpoint_Write_Stream_LE+0x34>
 648:	80 e0       	ldi	r24, 0x00	; 0
 64a:	df 91       	pop	r29
 64c:	cf 91       	pop	r28
 64e:	1f 91       	pop	r17
 650:	0f 91       	pop	r16
 652:	ff 90       	pop	r15
 654:	ef 90       	pop	r14
 656:	df 90       	pop	r13
 658:	cf 90       	pop	r12
 65a:	08 95       	ret

0000065c <Endpoint_Write_Control_Stream_LE>:
 65c:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <USB_ControlRequest+0x6>
 660:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <USB_ControlRequest+0x7>
 664:	26 17       	cp	r18, r22
 666:	37 07       	cpc	r19, r23
 668:	48 f0       	brcs	.+18     	; 0x67c <Endpoint_Write_Control_Stream_LE+0x20>
 66a:	61 15       	cp	r22, r1
 66c:	71 05       	cpc	r23, r1
 66e:	39 f4       	brne	.+14     	; 0x67e <Endpoint_Write_Control_Stream_LE+0x22>
 670:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 674:	2e 77       	andi	r18, 0x7E	; 126
 676:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 67a:	01 c0       	rjmp	.+2      	; 0x67e <Endpoint_Write_Control_Stream_LE+0x22>
 67c:	b9 01       	movw	r22, r18
 67e:	fc 01       	movw	r30, r24
 680:	20 e0       	ldi	r18, 0x00	; 0
 682:	61 15       	cp	r22, r1
 684:	71 05       	cpc	r23, r1
 686:	79 f1       	breq	.+94     	; 0x6e6 <Endpoint_Write_Control_Stream_LE+0x8a>
 688:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <USB_DeviceState>
 68c:	88 23       	and	r24, r24
 68e:	f1 f1       	breq	.+124    	; 0x70c <Endpoint_Write_Control_Stream_LE+0xb0>
 690:	85 30       	cpi	r24, 0x05	; 5
 692:	f1 f1       	breq	.+124    	; 0x710 <Endpoint_Write_Control_Stream_LE+0xb4>
 694:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 698:	83 fd       	sbrc	r24, 3
 69a:	3c c0       	rjmp	.+120    	; 0x714 <Endpoint_Write_Control_Stream_LE+0xb8>
 69c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 6a0:	82 fd       	sbrc	r24, 2
 6a2:	2e c0       	rjmp	.+92     	; 0x700 <Endpoint_Write_Control_Stream_LE+0xa4>
 6a4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 6a8:	80 ff       	sbrs	r24, 0
 6aa:	eb cf       	rjmp	.-42     	; 0x682 <Endpoint_Write_Control_Stream_LE+0x26>
 6ac:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
 6b0:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	92 2b       	or	r25, r18
 6b8:	61 15       	cp	r22, r1
 6ba:	71 05       	cpc	r23, r1
 6bc:	51 f0       	breq	.+20     	; 0x6d2 <Endpoint_Write_Control_Stream_LE+0x76>
 6be:	88 30       	cpi	r24, 0x08	; 8
 6c0:	91 05       	cpc	r25, r1
 6c2:	38 f4       	brcc	.+14     	; 0x6d2 <Endpoint_Write_Control_Stream_LE+0x76>
 6c4:	21 91       	ld	r18, Z+
 6c6:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
 6ca:	61 50       	subi	r22, 0x01	; 1
 6cc:	71 09       	sbc	r23, r1
 6ce:	01 96       	adiw	r24, 0x01	; 1
 6d0:	f3 cf       	rjmp	.-26     	; 0x6b8 <Endpoint_Write_Control_Stream_LE+0x5c>
 6d2:	21 e0       	ldi	r18, 0x01	; 1
 6d4:	08 97       	sbiw	r24, 0x08	; 8
 6d6:	09 f0       	breq	.+2      	; 0x6da <Endpoint_Write_Control_Stream_LE+0x7e>
 6d8:	20 e0       	ldi	r18, 0x00	; 0
 6da:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 6de:	8e 77       	andi	r24, 0x7E	; 126
 6e0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 6e4:	ce cf       	rjmp	.-100    	; 0x682 <Endpoint_Write_Control_Stream_LE+0x26>
 6e6:	21 11       	cpse	r18, r1
 6e8:	cf cf       	rjmp	.-98     	; 0x688 <Endpoint_Write_Control_Stream_LE+0x2c>
 6ea:	0a c0       	rjmp	.+20     	; 0x700 <Endpoint_Write_Control_Stream_LE+0xa4>
 6ec:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <USB_DeviceState>
 6f0:	88 23       	and	r24, r24
 6f2:	61 f0       	breq	.+24     	; 0x70c <Endpoint_Write_Control_Stream_LE+0xb0>
 6f4:	85 30       	cpi	r24, 0x05	; 5
 6f6:	61 f0       	breq	.+24     	; 0x710 <Endpoint_Write_Control_Stream_LE+0xb4>
 6f8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 6fc:	83 fd       	sbrc	r24, 3
 6fe:	0a c0       	rjmp	.+20     	; 0x714 <Endpoint_Write_Control_Stream_LE+0xb8>
 700:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 704:	82 ff       	sbrs	r24, 2
 706:	f2 cf       	rjmp	.-28     	; 0x6ec <Endpoint_Write_Control_Stream_LE+0x90>
 708:	80 e0       	ldi	r24, 0x00	; 0
 70a:	08 95       	ret
 70c:	82 e0       	ldi	r24, 0x02	; 2
 70e:	08 95       	ret
 710:	83 e0       	ldi	r24, 0x03	; 3
 712:	08 95       	ret
 714:	81 e0       	ldi	r24, 0x01	; 1
 716:	08 95       	ret

00000718 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
 718:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <USB_ControlRequest+0x6>
 71c:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <USB_ControlRequest+0x7>
 720:	26 17       	cp	r18, r22
 722:	37 07       	cpc	r19, r23
 724:	48 f0       	brcs	.+18     	; 0x738 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 726:	61 15       	cp	r22, r1
 728:	71 05       	cpc	r23, r1
 72a:	39 f4       	brne	.+14     	; 0x73a <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 72c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 730:	2e 77       	andi	r18, 0x7E	; 126
 732:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 736:	01 c0       	rjmp	.+2      	; 0x73a <Endpoint_Write_Control_PStream_LE+0x22>
 738:	b9 01       	movw	r22, r18
 73a:	fc 01       	movw	r30, r24
 73c:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 73e:	61 15       	cp	r22, r1
 740:	71 05       	cpc	r23, r1
 742:	91 f1       	breq	.+100    	; 0x7a8 <Endpoint_Write_Control_PStream_LE+0x90>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 744:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 748:	88 23       	and	r24, r24
 74a:	09 f4       	brne	.+2      	; 0x74e <Endpoint_Write_Control_PStream_LE+0x36>
 74c:	40 c0       	rjmp	.+128    	; 0x7ce <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 74e:	85 30       	cpi	r24, 0x05	; 5
 750:	09 f4       	brne	.+2      	; 0x754 <Endpoint_Write_Control_PStream_LE+0x3c>
 752:	3f c0       	rjmp	.+126    	; 0x7d2 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 754:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 758:	83 fd       	sbrc	r24, 3
 75a:	3d c0       	rjmp	.+122    	; 0x7d6 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 75c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
 760:	82 fd       	sbrc	r24, 2
 762:	2f c0       	rjmp	.+94     	; 0x7c2 <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 764:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
		  break;

		if (Endpoint_IsINReady())
 768:	80 ff       	sbrs	r24, 0
 76a:	e9 cf       	rjmp	.-46     	; 0x73e <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
 76c:	20 91 f3 00 	lds	r18, 0x00F3	; 0x8000f3 <__DATA_REGION_ORIGIN__+0x93>
 770:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
 774:	90 e0       	ldi	r25, 0x00	; 0
 776:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
 778:	61 15       	cp	r22, r1
 77a:	71 05       	cpc	r23, r1
 77c:	59 f0       	breq	.+22     	; 0x794 <Endpoint_Write_Control_PStream_LE+0x7c>
 77e:	88 30       	cpi	r24, 0x08	; 8
 780:	91 05       	cpc	r25, r1
 782:	40 f4       	brcc	.+16     	; 0x794 <Endpoint_Write_Control_PStream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 784:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 786:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
 78a:	31 96       	adiw	r30, 0x01	; 1
				Length--;
 78c:	61 50       	subi	r22, 0x01	; 1
 78e:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 790:	01 96       	adiw	r24, 0x01	; 1
 792:	f2 cf       	rjmp	.-28     	; 0x778 <Endpoint_Write_Control_PStream_LE+0x60>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
 794:	21 e0       	ldi	r18, 0x01	; 1
 796:	08 97       	sbiw	r24, 0x08	; 8
 798:	09 f0       	breq	.+2      	; 0x79c <Endpoint_Write_Control_PStream_LE+0x84>
 79a:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 79c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 7a0:	8e 77       	andi	r24, 0x7E	; 126
 7a2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 7a6:	cb cf       	rjmp	.-106    	; 0x73e <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 7a8:	21 11       	cpse	r18, r1
 7aa:	cc cf       	rjmp	.-104    	; 0x744 <Endpoint_Write_Control_PStream_LE+0x2c>
 7ac:	0a c0       	rjmp	.+20     	; 0x7c2 <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 7ae:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 7b2:	88 23       	and	r24, r24
 7b4:	61 f0       	breq	.+24     	; 0x7ce <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 7b6:	85 30       	cpi	r24, 0x05	; 5
 7b8:	61 f0       	breq	.+24     	; 0x7d2 <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 7ba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
 7be:	83 fd       	sbrc	r24, 3
 7c0:	0a c0       	rjmp	.+20     	; 0x7d6 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 7c2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
 7c6:	82 ff       	sbrs	r24, 2
 7c8:	f2 cf       	rjmp	.-28     	; 0x7ae <Endpoint_Write_Control_PStream_LE+0x96>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 7ca:	80 e0       	ldi	r24, 0x00	; 0
 7cc:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 7ce:	82 e0       	ldi	r24, 0x02	; 2
 7d0:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 7d2:	83 e0       	ldi	r24, 0x03	; 3
 7d4:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 7d6:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 7d8:	08 95       	ret

000007da <Endpoint_ConfigureEndpoint_Prv>:
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 7da:	98 2f       	mov	r25, r24
 7dc:	97 30       	cpi	r25, 0x07	; 7
 7de:	68 f5       	brcc	.+90     	; 0x83a <Endpoint_ConfigureEndpoint_Prv+0x60>
 7e0:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
 7e4:	98 17       	cp	r25, r24
 7e6:	39 f0       	breq	.+14     	; 0x7f6 <Endpoint_ConfigureEndpoint_Prv+0x1c>
 7e8:	70 91 ec 00 	lds	r23, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
 7ec:	20 91 ed 00 	lds	r18, 0x00ED	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
 7f0:	50 91 f0 00 	lds	r21, 0x00F0	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>
 7f4:	03 c0       	rjmp	.+6      	; 0x7fc <Endpoint_ConfigureEndpoint_Prv+0x22>
 7f6:	24 2f       	mov	r18, r20
 7f8:	76 2f       	mov	r23, r22
 7fa:	50 e0       	ldi	r21, 0x00	; 0
 7fc:	21 fd       	sbrc	r18, 1
 7fe:	02 c0       	rjmp	.+4      	; 0x804 <Endpoint_ConfigureEndpoint_Prv+0x2a>
 800:	9f 5f       	subi	r25, 0xFF	; 255
 802:	ec cf       	rjmp	.-40     	; 0x7dc <Endpoint_ConfigureEndpoint_Prv+0x2>
 804:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
 808:	3e 7f       	andi	r19, 0xFE	; 254
 80a:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
 80e:	30 91 ed 00 	lds	r19, 0x00ED	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
 812:	3d 7f       	andi	r19, 0xFD	; 253
 814:	30 93 ed 00 	sts	0x00ED, r19	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
 818:	30 91 eb 00 	lds	r19, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
 81c:	31 60       	ori	r19, 0x01	; 1
 81e:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
 822:	70 93 ec 00 	sts	0x00EC, r23	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
 826:	20 93 ed 00 	sts	0x00ED, r18	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
 82a:	50 93 f0 00 	sts	0x00F0, r21	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>
 82e:	20 91 ee 00 	lds	r18, 0x00EE	; 0x8000ee <__DATA_REGION_ORIGIN__+0x8e>
 832:	27 fd       	sbrc	r18, 7
 834:	e5 cf       	rjmp	.-54     	; 0x800 <Endpoint_ConfigureEndpoint_Prv+0x26>
 836:	80 e0       	ldi	r24, 0x00	; 0
 838:	08 95       	ret
 83a:	8f 70       	andi	r24, 0x0F	; 15
 83c:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
 840:	81 e0       	ldi	r24, 0x01	; 1
 842:	08 95       	ret

00000844 <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 844:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <USB_ControlRequest>
 848:	87 ff       	sbrs	r24, 7
 84a:	11 c0       	rjmp	.+34     	; 0x86e <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 84c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	{
		while (!(Endpoint_IsOUTReceived()))
 850:	82 fd       	sbrc	r24, 2
 852:	05 c0       	rjmp	.+10     	; 0x85e <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 854:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <USB_DeviceState>
 858:	81 11       	cpse	r24, r1
 85a:	f8 cf       	rjmp	.-16     	; 0x84c <Endpoint_ClearStatusStage+0x8>
 85c:	11 c0       	rjmp	.+34     	; 0x880 <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 85e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 862:	8b 77       	andi	r24, 0x7B	; 123
 864:	0b c0       	rjmp	.+22     	; 0x87c <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 866:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <USB_DeviceState>
 86a:	88 23       	and	r24, r24
 86c:	49 f0       	breq	.+18     	; 0x880 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 86e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 872:	80 ff       	sbrs	r24, 0
 874:	f8 cf       	rjmp	.-16     	; 0x866 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 876:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 87a:	8e 77       	andi	r24, 0x7E	; 126
 87c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 880:	08 95       	ret

00000882 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
 882:	20 91 e4 00 	lds	r18, 0x00E4	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
 886:	30 91 e5 00 	lds	r19, 0x00E5	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
 88a:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 88c:	40 91 ec 00 	lds	r20, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
 890:	84 2f       	mov	r24, r20
 892:	81 70       	andi	r24, 0x01	; 1
 894:	40 ff       	sbrs	r20, 0
 896:	23 c0       	rjmp	.+70     	; 0x8de <Endpoint_WaitUntilReady+0x5c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 898:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
 89c:	80 fd       	sbrc	r24, 0
 89e:	1d c0       	rjmp	.+58     	; 0x8da <Endpoint_WaitUntilReady+0x58>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
 8a0:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <USB_DeviceState>

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
 8a4:	88 23       	and	r24, r24
 8a6:	99 f0       	breq	.+38     	; 0x8ce <Endpoint_WaitUntilReady+0x4c>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
 8a8:	85 30       	cpi	r24, 0x05	; 5
 8aa:	99 f0       	breq	.+38     	; 0x8d2 <Endpoint_WaitUntilReady+0x50>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 8ac:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 8b0:	85 fd       	sbrc	r24, 5
 8b2:	11 c0       	rjmp	.+34     	; 0x8d6 <Endpoint_WaitUntilReady+0x54>
 8b4:	40 91 e4 00 	lds	r20, 0x00E4	; 0x8000e4 <__DATA_REGION_ORIGIN__+0x84>
 8b8:	50 91 e5 00 	lds	r21, 0x00E5	; 0x8000e5 <__DATA_REGION_ORIGIN__+0x85>
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
 8bc:	24 17       	cp	r18, r20
 8be:	35 07       	cpc	r19, r21
 8c0:	29 f3       	breq	.-54     	; 0x88c <Endpoint_WaitUntilReady+0xa>
 8c2:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
 8c4:	11 f0       	breq	.+4      	; 0x8ca <Endpoint_WaitUntilReady+0x48>
 8c6:	9a 01       	movw	r18, r20
 8c8:	e1 cf       	rjmp	.-62     	; 0x88c <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
 8ca:	84 e0       	ldi	r24, 0x04	; 4
 8cc:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 8ce:	82 e0       	ldi	r24, 0x02	; 2
 8d0:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 8d2:	83 e0       	ldi	r24, 0x03	; 3
 8d4:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 8d6:	81 e0       	ldi	r24, 0x01	; 1
 8d8:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 8da:	80 e0       	ldi	r24, 0x00	; 0
 8dc:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 8de:	40 91 e8 00 	lds	r20, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 8e2:	42 ff       	sbrs	r20, 2
 8e4:	dd cf       	rjmp	.-70     	; 0x8a0 <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
 8e6:	08 95       	ret

000008e8 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
 8e8:	0f 93       	push	r16
 8ea:	1f 93       	push	r17
 8ec:	cf 93       	push	r28
 8ee:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
 8f0:	4b d0       	rcall	.+150    	; 0x988 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
 8f2:	52 d0       	rcall	.+164    	; 0x998 <USB_INT_ClearAllInterrupts>
 8f4:	c8 ed       	ldi	r28, 0xD8	; 216
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
 8f6:	d0 e0       	ldi	r29, 0x00	; 0
 8f8:	88 81       	ld	r24, Y
 8fa:	8f 77       	andi	r24, 0x7F	; 127
 8fc:	88 83       	st	Y, r24
 8fe:	88 81       	ld	r24, Y
				USBCON |=  (1 << USBE);
 900:	80 68       	ori	r24, 0x80	; 128
 902:	88 83       	st	Y, r24
 904:	88 81       	ld	r24, Y
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 906:	8f 7d       	andi	r24, 0xDF	; 223
 908:	88 83       	st	Y, r24
 90a:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 90c:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <USB_DeviceState>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
 910:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <USB_Device_ConfigurationNumber>
	USB_Device_ConfigurationNumber  = 0;
 914:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <USB_Device_RemoteWakeupEnabled>

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
 918:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <USB_Device_CurrentlySelfPowered>
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
 91c:	00 ee       	ldi	r16, 0xE0	; 224
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
 91e:	10 e0       	ldi	r17, 0x00	; 0
 920:	f8 01       	movw	r30, r16
 922:	80 81       	ld	r24, Z
 924:	8b 7f       	andi	r24, 0xFB	; 251
 926:	80 83       	st	Z, r24
 928:	88 81       	ld	r24, Y
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
 92a:	81 60       	ori	r24, 0x01	; 1
 92c:	88 83       	st	Y, r24
 92e:	42 e0       	ldi	r20, 0x02	; 2
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 930:	60 e0       	ldi	r22, 0x00	; 0
 932:	80 e0       	ldi	r24, 0x00	; 0
 934:	52 df       	rcall	.-348    	; 0x7da <Endpoint_ConfigureEndpoint_Prv>
 936:	e1 ee       	ldi	r30, 0xE1	; 225
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 938:	f0 e0       	ldi	r31, 0x00	; 0
 93a:	80 81       	ld	r24, Z
 93c:	8e 7f       	andi	r24, 0xFE	; 254
 93e:	80 83       	st	Z, r24
 940:	e2 ee       	ldi	r30, 0xE2	; 226
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 942:	f0 e0       	ldi	r31, 0x00	; 0
 944:	80 81       	ld	r24, Z
 946:	81 60       	ori	r24, 0x01	; 1
 948:	80 83       	st	Z, r24
 94a:	80 81       	ld	r24, Z
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
 94c:	88 60       	ori	r24, 0x08	; 8
 94e:	80 83       	st	Z, r24
 950:	f8 01       	movw	r30, r16
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 952:	80 81       	ld	r24, Z
 954:	8e 7f       	andi	r24, 0xFE	; 254
 956:	80 83       	st	Z, r24
 958:	88 81       	ld	r24, Y

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
 95a:	80 61       	ori	r24, 0x10	; 16
 95c:	88 83       	st	Y, r24
 95e:	df 91       	pop	r29
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
 960:	cf 91       	pop	r28
 962:	1f 91       	pop	r17
 964:	0f 91       	pop	r16
 966:	08 95       	ret

00000968 <USB_Init>:
 968:	e8 ed       	ldi	r30, 0xD8	; 216
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
 96a:	f0 e0       	ldi	r31, 0x00	; 0
 96c:	80 81       	ld	r24, Z
 96e:	8f 7e       	andi	r24, 0xEF	; 239
 970:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
 972:	e7 ed       	ldi	r30, 0xD7	; 215
 974:	f0 e0       	ldi	r31, 0x00	; 0
 976:	80 81       	ld	r24, Z
 978:	81 60       	ori	r24, 0x01	; 1
 97a:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
 97c:	84 e0       	ldi	r24, 0x04	; 4
 97e:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
 980:	81 e0       	ldi	r24, 0x01	; 1
 982:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <USB_IsInitialized>

	USB_ResetInterface();
 986:	b0 cf       	rjmp	.-160    	; 0x8e8 <USB_ResetInterface>

00000988 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
 988:	e8 ed       	ldi	r30, 0xD8	; 216
 98a:	f0 e0       	ldi	r31, 0x00	; 0
 98c:	80 81       	ld	r24, Z
 98e:	8e 7f       	andi	r24, 0xFE	; 254
 990:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 992:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 996:	08 95       	ret

00000998 <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
 998:	10 92 da 00 	sts	0x00DA, r1	; 0x8000da <__DATA_REGION_ORIGIN__+0x7a>
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
 99c:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 9a0:	08 95       	ret

000009a2 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 9a2:	1f 92       	push	r1
 9a4:	0f 92       	push	r0
 9a6:	0f b6       	in	r0, 0x3f	; 63
 9a8:	0f 92       	push	r0
 9aa:	11 24       	eor	r1, r1
 9ac:	2f 93       	push	r18
 9ae:	3f 93       	push	r19
 9b0:	4f 93       	push	r20
 9b2:	5f 93       	push	r21
 9b4:	6f 93       	push	r22
 9b6:	7f 93       	push	r23
 9b8:	8f 93       	push	r24
 9ba:	9f 93       	push	r25
 9bc:	af 93       	push	r26
 9be:	bf 93       	push	r27
 9c0:	ef 93       	push	r30
 9c2:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
 9c4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 9c8:	82 ff       	sbrs	r24, 2
 9ca:	0a c0       	rjmp	.+20     	; 0x9e0 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
 9cc:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 9d0:	82 ff       	sbrs	r24, 2
 9d2:	06 c0       	rjmp	.+12     	; 0x9e0 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
 9d4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 9d8:	8b 7f       	andi	r24, 0xFB	; 251
 9da:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
 9de:	35 dc       	rcall	.-1942   	; 0x24a <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
 9e0:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__DATA_REGION_ORIGIN__+0x7a>
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
 9e4:	80 ff       	sbrs	r24, 0
 9e6:	1b c0       	rjmp	.+54     	; 0xa1e <__vector_10+0x7c>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
 9e8:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
 9ec:	80 ff       	sbrs	r24, 0
 9ee:	17 c0       	rjmp	.+46     	; 0xa1e <__vector_10+0x7c>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
 9f0:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__DATA_REGION_ORIGIN__+0x7a>
 9f4:	8e 7f       	andi	r24, 0xFE	; 254
 9f6:	80 93 da 00 	sts	0x00DA, r24	; 0x8000da <__DATA_REGION_ORIGIN__+0x7a>
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
 9fa:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__DATA_REGION_ORIGIN__+0x79>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 9fe:	19 bc       	out	0x29, r1	; 41
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
 a00:	80 ff       	sbrs	r24, 0
 a02:	0a c0       	rjmp	.+20     	; 0xa18 <__vector_10+0x76>
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 a04:	82 e0       	ldi	r24, 0x02	; 2
 a06:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
 a08:	09 b4       	in	r0, 0x29	; 41
 a0a:	00 fe       	sbrs	r0, 0
 a0c:	fd cf       	rjmp	.-6      	; 0xa08 <__vector_10+0x66>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
 a0e:	81 e0       	ldi	r24, 0x01	; 1
 a10:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <USB_DeviceState>
			EVENT_USB_Device_Connect();
 a14:	fa db       	rcall	.-2060   	; 0x20a <EVENT_USB_Device_Connect>
 a16:	03 c0       	rjmp	.+6      	; 0xa1e <__vector_10+0x7c>
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
 a18:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <USB_DeviceState>
			EVENT_USB_Device_Disconnect();
 a1c:	fc db       	rcall	.-2056   	; 0x216 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
 a1e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
 a22:	80 ff       	sbrs	r24, 0
 a24:	18 c0       	rjmp	.+48     	; 0xa56 <__vector_10+0xb4>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
 a26:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 a2a:	80 ff       	sbrs	r24, 0
 a2c:	14 c0       	rjmp	.+40     	; 0xa56 <__vector_10+0xb4>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 a2e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 a32:	8e 7f       	andi	r24, 0xFE	; 254
 a34:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 a38:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 a3c:	80 61       	ori	r24, 0x10	; 16
 a3e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
 a42:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
 a46:	80 62       	ori	r24, 0x20	; 32
 a48:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
 a4c:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
 a4e:	85 e0       	ldi	r24, 0x05	; 5
 a50:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <USB_DeviceState>
		EVENT_USB_Device_Suspend();
 a54:	ca d1       	rcall	.+916    	; 0xdea <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
 a56:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
 a5a:	84 ff       	sbrs	r24, 4
 a5c:	2e c0       	rjmp	.+92     	; 0xaba <__vector_10+0x118>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
 a5e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 a62:	84 ff       	sbrs	r24, 4
 a64:	2a c0       	rjmp	.+84     	; 0xaba <__vector_10+0x118>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
 a66:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
 a68:	82 e0       	ldi	r24, 0x02	; 2
 a6a:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 a6c:	09 b4       	in	r0, 0x29	; 41
 a6e:	00 fe       	sbrs	r0, 0
 a70:	fd cf       	rjmp	.-6      	; 0xa6c <__vector_10+0xca>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
 a72:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
 a76:	8f 7d       	andi	r24, 0xDF	; 223
 a78:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
 a7c:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 a80:	8f 7e       	andi	r24, 0xEF	; 239
 a82:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
 a86:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 a8a:	8f 7e       	andi	r24, 0xEF	; 239
 a8c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
 a90:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 a94:	81 60       	ori	r24, 0x01	; 1
 a96:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
 a9a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <USB_Device_ConfigurationNumber>
 a9e:	88 23       	and	r24, r24
 aa0:	11 f0       	breq	.+4      	; 0xaa6 <__vector_10+0x104>
		  USB_DeviceState = DEVICE_STATE_Configured;
 aa2:	84 e0       	ldi	r24, 0x04	; 4
 aa4:	07 c0       	rjmp	.+14     	; 0xab4 <__vector_10+0x112>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 aa6:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
 aaa:	87 fd       	sbrc	r24, 7
 aac:	02 c0       	rjmp	.+4      	; 0xab2 <__vector_10+0x110>
 aae:	81 e0       	ldi	r24, 0x01	; 1
 ab0:	01 c0       	rjmp	.+2      	; 0xab4 <__vector_10+0x112>
 ab2:	83 e0       	ldi	r24, 0x03	; 3
 ab4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <USB_DeviceState>

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
 ab8:	98 d1       	rcall	.+816    	; 0xdea <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
 aba:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 abe:	83 ff       	sbrs	r24, 3
 ac0:	22 c0       	rjmp	.+68     	; 0xb06 <__stack+0x7>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
 ac2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 ac6:	83 ff       	sbrs	r24, 3
 ac8:	1e c0       	rjmp	.+60     	; 0xb06 <__stack+0x7>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
 aca:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 ace:	87 7f       	andi	r24, 0xF7	; 247
 ad0:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
 ad4:	82 e0       	ldi	r24, 0x02	; 2
 ad6:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <USB_DeviceState>
		USB_Device_ConfigurationNumber = 0;
 ada:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <USB_Device_ConfigurationNumber>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
 ade:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
 ae2:	8e 7f       	andi	r24, 0xFE	; 254
 ae4:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
 ae8:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 aec:	8e 7f       	andi	r24, 0xFE	; 254
 aee:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
 af2:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
 af6:	80 61       	ori	r24, 0x10	; 16
 af8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
 afc:	42 e0       	ldi	r20, 0x02	; 2
 afe:	60 e0       	ldi	r22, 0x00	; 0
 b00:	80 e0       	ldi	r24, 0x00	; 0
 b02:	6b de       	rcall	.-810    	; 0x7da <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 b04:	72 d1       	rcall	.+740    	; 0xdea <USB_Event_Stub>
 b06:	ff 91       	pop	r31
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
 b08:	ef 91       	pop	r30
 b0a:	bf 91       	pop	r27
 b0c:	af 91       	pop	r26
 b0e:	9f 91       	pop	r25
 b10:	8f 91       	pop	r24
 b12:	7f 91       	pop	r23
 b14:	6f 91       	pop	r22
 b16:	5f 91       	pop	r21
 b18:	4f 91       	pop	r20
 b1a:	3f 91       	pop	r19
 b1c:	2f 91       	pop	r18
 b1e:	0f 90       	pop	r0
 b20:	0f be       	out	0x3f, r0	; 63
 b22:	0f 90       	pop	r0
 b24:	1f 90       	pop	r1
 b26:	18 95       	reti

00000b28 <USB_Device_ProcessControlRequest>:
 b28:	1f 93       	push	r17
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 b2a:	cf 93       	push	r28
 b2c:	df 93       	push	r29
 b2e:	cd b7       	in	r28, 0x3d	; 61
 b30:	de b7       	in	r29, 0x3e	; 62
 b32:	aa 97       	sbiw	r28, 0x2a	; 42
 b34:	0f b6       	in	r0, 0x3f	; 63
 b36:	f8 94       	cli
 b38:	de bf       	out	0x3e, r29	; 62
 b3a:	0f be       	out	0x3f, r0	; 63
 b3c:	cd bf       	out	0x3d, r28	; 61
 b3e:	e3 e1       	ldi	r30, 0x13	; 19
 b40:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
 b42:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
 b46:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 b48:	21 e0       	ldi	r18, 0x01	; 1
 b4a:	eb 31       	cpi	r30, 0x1B	; 27
 b4c:	f2 07       	cpc	r31, r18
 b4e:	c9 f7       	brne	.-14     	; 0xb42 <USB_Device_ProcessControlRequest+0x1a>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
 b50:	d0 db       	rcall	.-2144   	; 0x2f2 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b52:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

	if (Endpoint_IsSETUPReceived())
 b56:	83 ff       	sbrs	r24, 3
 b58:	30 c1       	rjmp	.+608    	; 0xdba <USB_Device_ProcessControlRequest+0x292>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 b5a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <USB_ControlRequest>

		switch (USB_ControlRequest.bRequest)
 b5e:	90 91 14 01 	lds	r25, 0x0114	; 0x800114 <USB_ControlRequest+0x1>
 b62:	95 30       	cpi	r25, 0x05	; 5
 b64:	09 f4       	brne	.+2      	; 0xb68 <USB_Device_ProcessControlRequest+0x40>
 b66:	83 c0       	rjmp	.+262    	; 0xc6e <USB_Device_ProcessControlRequest+0x146>
 b68:	30 f4       	brcc	.+12     	; 0xb76 <USB_Device_ProcessControlRequest+0x4e>
 b6a:	91 30       	cpi	r25, 0x01	; 1
 b6c:	a9 f1       	breq	.+106    	; 0xbd8 <USB_Device_ProcessControlRequest+0xb0>
 b6e:	68 f0       	brcs	.+26     	; 0xb8a <USB_Device_ProcessControlRequest+0x62>
 b70:	93 30       	cpi	r25, 0x03	; 3
 b72:	91 f1       	breq	.+100    	; 0xbd8 <USB_Device_ProcessControlRequest+0xb0>
 b74:	22 c1       	rjmp	.+580    	; 0xdba <USB_Device_ProcessControlRequest+0x292>
 b76:	98 30       	cpi	r25, 0x08	; 8
 b78:	09 f4       	brne	.+2      	; 0xb7c <USB_Device_ProcessControlRequest+0x54>
 b7a:	ef c0       	rjmp	.+478    	; 0xd5a <USB_Device_ProcessControlRequest+0x232>
 b7c:	99 30       	cpi	r25, 0x09	; 9
 b7e:	09 f4       	brne	.+2      	; 0xb82 <USB_Device_ProcessControlRequest+0x5a>
 b80:	fb c0       	rjmp	.+502    	; 0xd78 <USB_Device_ProcessControlRequest+0x250>
 b82:	96 30       	cpi	r25, 0x06	; 6
 b84:	09 f0       	breq	.+2      	; 0xb88 <USB_Device_ProcessControlRequest+0x60>
 b86:	19 c1       	rjmp	.+562    	; 0xdba <USB_Device_ProcessControlRequest+0x292>
 b88:	94 c0       	rjmp	.+296    	; 0xcb2 <USB_Device_ProcessControlRequest+0x18a>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 b8a:	80 38       	cpi	r24, 0x80	; 128
 b8c:	21 f0       	breq	.+8      	; 0xb96 <USB_Device_ProcessControlRequest+0x6e>
 b8e:	82 38       	cpi	r24, 0x82	; 130
 b90:	09 f0       	breq	.+2      	; 0xb94 <USB_Device_ProcessControlRequest+0x6c>
 b92:	13 c1       	rjmp	.+550    	; 0xdba <USB_Device_ProcessControlRequest+0x292>
 b94:	08 c0       	rjmp	.+16     	; 0xba6 <USB_Device_ProcessControlRequest+0x7e>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 b96:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <USB_Device_CurrentlySelfPowered>
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
 b9a:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <USB_Device_RemoteWakeupEnabled>
 b9e:	99 23       	and	r25, r25
 ba0:	89 f0       	breq	.+34     	; 0xbc4 <USB_Device_ProcessControlRequest+0x9c>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
 ba2:	82 60       	ori	r24, 0x02	; 2
 ba4:	0f c0       	rjmp	.+30     	; 0xbc4 <USB_Device_ProcessControlRequest+0x9c>
			break;
		}
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
		{
			#if !defined(CONTROL_ONLY_DEVICE)
			uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 ba6:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <USB_ControlRequest+0x4>
 baa:	8f 70       	andi	r24, 0x0F	; 15

			if (EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 bac:	87 30       	cpi	r24, 0x07	; 7
 bae:	08 f0       	brcs	.+2      	; 0xbb2 <USB_Device_ProcessControlRequest+0x8a>
 bb0:	04 c1       	rjmp	.+520    	; 0xdba <USB_Device_ProcessControlRequest+0x292>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 bb2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 bb6:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
				return;

			Endpoint_SelectEndpoint(EndpointIndex);

			CurrentStatus = Endpoint_IsStalled();
 bba:	85 fb       	bst	r24, 5
 bbc:	88 27       	eor	r24, r24
 bbe:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 bc0:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 bc4:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 bc8:	97 7f       	andi	r25, 0xF7	; 247
 bca:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
 bce:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
				UEDATX = (Data >> 8);
 bd2:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
 bd6:	cc c0       	rjmp	.+408    	; 0xd70 <USB_Device_ProcessControlRequest+0x248>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 bd8:	28 2f       	mov	r18, r24
 bda:	2d 7f       	andi	r18, 0xFD	; 253
 bdc:	09 f0       	breq	.+2      	; 0xbe0 <USB_Device_ProcessControlRequest+0xb8>
 bde:	ed c0       	rjmp	.+474    	; 0xdba <USB_Device_ProcessControlRequest+0x292>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 be0:	88 23       	and	r24, r24
 be2:	19 f0       	breq	.+6      	; 0xbea <USB_Device_ProcessControlRequest+0xc2>
 be4:	82 30       	cpi	r24, 0x02	; 2
 be6:	61 f0       	breq	.+24     	; 0xc00 <USB_Device_ProcessControlRequest+0xd8>
 be8:	e8 c0       	rjmp	.+464    	; 0xdba <USB_Device_ProcessControlRequest+0x292>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
 bea:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <USB_ControlRequest+0x2>
 bee:	81 30       	cpi	r24, 0x01	; 1
 bf0:	09 f0       	breq	.+2      	; 0xbf4 <USB_Device_ProcessControlRequest+0xcc>
 bf2:	e3 c0       	rjmp	.+454    	; 0xdba <USB_Device_ProcessControlRequest+0x292>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
 bf4:	93 30       	cpi	r25, 0x03	; 3
 bf6:	09 f0       	breq	.+2      	; 0xbfa <USB_Device_ProcessControlRequest+0xd2>
 bf8:	80 e0       	ldi	r24, 0x00	; 0
 bfa:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <USB_Device_RemoteWakeupEnabled>
 bfe:	2e c0       	rjmp	.+92     	; 0xc5c <USB_Device_ProcessControlRequest+0x134>
		}
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
		{
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
 c00:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <USB_ControlRequest+0x2>
 c04:	81 11       	cpse	r24, r1
 c06:	2a c0       	rjmp	.+84     	; 0xc5c <USB_Device_ProcessControlRequest+0x134>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 c08:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <USB_ControlRequest+0x4>
 c0c:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP || EndpointIndex >= ENDPOINT_TOTAL_ENDPOINTS)
 c0e:	2f ef       	ldi	r18, 0xFF	; 255
 c10:	28 0f       	add	r18, r24
 c12:	26 30       	cpi	r18, 0x06	; 6
 c14:	08 f0       	brcs	.+2      	; 0xc18 <USB_Device_ProcessControlRequest+0xf0>
 c16:	d1 c0       	rjmp	.+418    	; 0xdba <USB_Device_ProcessControlRequest+0x292>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c18:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 c1c:	20 91 eb 00 	lds	r18, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
 c20:	20 ff       	sbrs	r18, 0
 c22:	1c c0       	rjmp	.+56     	; 0xc5c <USB_Device_ProcessControlRequest+0x134>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
 c24:	93 30       	cpi	r25, 0x03	; 3
 c26:	21 f4       	brne	.+8      	; 0xc30 <USB_Device_ProcessControlRequest+0x108>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 c28:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
 c2c:	80 62       	ori	r24, 0x20	; 32
 c2e:	14 c0       	rjmp	.+40     	; 0xc58 <USB_Device_ProcessControlRequest+0x130>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 c30:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
 c34:	90 61       	ori	r25, 0x10	; 16
 c36:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
 c3a:	21 e0       	ldi	r18, 0x01	; 1
 c3c:	30 e0       	ldi	r19, 0x00	; 0
 c3e:	a9 01       	movw	r20, r18
 c40:	02 c0       	rjmp	.+4      	; 0xc46 <USB_Device_ProcessControlRequest+0x11e>
 c42:	44 0f       	add	r20, r20
 c44:	55 1f       	adc	r21, r21
 c46:	8a 95       	dec	r24
 c48:	e2 f7       	brpl	.-8      	; 0xc42 <USB_Device_ProcessControlRequest+0x11a>
 c4a:	40 93 ea 00 	sts	0x00EA, r20	; 0x8000ea <__DATA_REGION_ORIGIN__+0x8a>
				UERST = 0;
 c4e:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__DATA_REGION_ORIGIN__+0x8a>

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 c52:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
 c56:	88 60       	ori	r24, 0x08	; 8
 c58:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 c5c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c60:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 c64:	87 7f       	andi	r24, 0xF7	; 247
 c66:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 c6a:	ec dd       	rcall	.-1064   	; 0x844 <Endpoint_ClearStatusStage>
 c6c:	a6 c0       	rjmp	.+332    	; 0xdba <USB_Device_ProcessControlRequest+0x292>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 c6e:	81 11       	cpse	r24, r1
 c70:	a4 c0       	rjmp	.+328    	; 0xdba <USB_Device_ProcessControlRequest+0x292>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 c72:	10 91 15 01 	lds	r17, 0x0115	; 0x800115 <USB_ControlRequest+0x2>
 c76:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
 c78:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
 c7c:	80 78       	andi	r24, 0x80	; 128
 c7e:	81 2b       	or	r24, r17
 c80:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
 c84:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 c88:	87 7f       	andi	r24, 0xF7	; 247
 c8a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
 c8e:	da dd       	rcall	.-1100   	; 0x844 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
 c90:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

	while (!(Endpoint_IsINReady()));
 c94:	80 ff       	sbrs	r24, 0
 c96:	fc cf       	rjmp	.-8      	; 0xc90 <USB_Device_ProcessControlRequest+0x168>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
 c98:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
 c9c:	80 68       	ori	r24, 0x80	; 128
 c9e:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 ca2:	11 11       	cpse	r17, r1
 ca4:	02 c0       	rjmp	.+4      	; 0xcaa <USB_Device_ProcessControlRequest+0x182>
 ca6:	82 e0       	ldi	r24, 0x02	; 2
 ca8:	01 c0       	rjmp	.+2      	; 0xcac <USB_Device_ProcessControlRequest+0x184>
 caa:	83 e0       	ldi	r24, 0x03	; 3
 cac:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <USB_DeviceState>
 cb0:	84 c0       	rjmp	.+264    	; 0xdba <USB_Device_ProcessControlRequest+0x292>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 cb2:	80 58       	subi	r24, 0x80	; 128
 cb4:	82 30       	cpi	r24, 0x02	; 2
 cb6:	08 f0       	brcs	.+2      	; 0xcba <USB_Device_ProcessControlRequest+0x192>
 cb8:	80 c0       	rjmp	.+256    	; 0xdba <USB_Device_ProcessControlRequest+0x292>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
 cba:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <USB_ControlRequest+0x2>
 cbe:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <USB_ControlRequest+0x3>
 cc2:	8c 3d       	cpi	r24, 0xDC	; 220
 cc4:	53 e0       	ldi	r21, 0x03	; 3
 cc6:	95 07       	cpc	r25, r21
 cc8:	71 f5       	brne	.+92     	; 0xd26 <USB_Device_ProcessControlRequest+0x1fe>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
 cca:	83 e0       	ldi	r24, 0x03	; 3
 ccc:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
 cce:	8a e2       	ldi	r24, 0x2A	; 42
 cd0:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
 cd2:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
 cd4:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
 cd6:	de 01       	movw	r26, r28
 cd8:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 cda:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
 cdc:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
 cde:	51 e2       	ldi	r21, 0x21	; 33
 ce0:	e3 2f       	mov	r30, r19
 ce2:	f0 e0       	ldi	r31, 0x00	; 0
 ce4:	50 93 57 00 	sts	0x0057, r21	; 0x800057 <__TEXT_REGION_LENGTH__+0x7e0057>
 ce8:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
 cea:	20 ff       	sbrs	r18, 0
 cec:	03 c0       	rjmp	.+6      	; 0xcf4 <USB_Device_ProcessControlRequest+0x1cc>
					{
						SerialByte >>= 4;
 cee:	e2 95       	swap	r30
 cf0:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
 cf2:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
 cf4:	ef 70       	andi	r30, 0x0F	; 15
 cf6:	8e 2f       	mov	r24, r30
 cf8:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
 cfa:	ea 30       	cpi	r30, 0x0A	; 10
 cfc:	10 f0       	brcs	.+4      	; 0xd02 <USB_Device_ProcessControlRequest+0x1da>
 cfe:	c7 96       	adiw	r24, 0x37	; 55
 d00:	01 c0       	rjmp	.+2      	; 0xd04 <USB_Device_ProcessControlRequest+0x1dc>
 d02:	c0 96       	adiw	r24, 0x30	; 48
 d04:	8d 93       	st	X+, r24
 d06:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
 d08:	2f 5f       	subi	r18, 0xFF	; 255
 d0a:	24 31       	cpi	r18, 0x14	; 20
 d0c:	49 f7       	brne	.-46     	; 0xce0 <USB_Device_ProcessControlRequest+0x1b8>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
 d0e:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d10:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 d14:	87 7f       	andi	r24, 0xF7	; 247
 d16:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
 d1a:	6a e2       	ldi	r22, 0x2A	; 42
 d1c:	70 e0       	ldi	r23, 0x00	; 0
 d1e:	ce 01       	movw	r24, r28
 d20:	01 96       	adiw	r24, 0x01	; 1
 d22:	9c dc       	rcall	.-1736   	; 0x65c <Endpoint_Write_Control_Stream_LE>
 d24:	14 c0       	rjmp	.+40     	; 0xd4e <USB_Device_ProcessControlRequest+0x226>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 d26:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <USB_ControlRequest+0x4>
 d2a:	70 91 18 01 	lds	r23, 0x0118	; 0x800118 <USB_ControlRequest+0x5>
 d2e:	ae 01       	movw	r20, r28
 d30:	4f 5f       	subi	r20, 0xFF	; 255
 d32:	5f 4f       	sbci	r21, 0xFF	; 255
 d34:	08 dc       	rcall	.-2032   	; 0x546 <CALLBACK_USB_GetDescriptor>
 d36:	bc 01       	movw	r22, r24
 d38:	89 2b       	or	r24, r25
 d3a:	09 f4       	brne	.+2      	; 0xd3e <USB_Device_ProcessControlRequest+0x216>
 d3c:	3e c0       	rjmp	.+124    	; 0xdba <USB_Device_ProcessControlRequest+0x292>
 d3e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 d42:	97 7f       	andi	r25, 0xF7	; 247
 d44:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
 d48:	89 81       	ldd	r24, Y+1	; 0x01
 d4a:	9a 81       	ldd	r25, Y+2	; 0x02
 d4c:	e5 dc       	rcall	.-1590   	; 0x718 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 d4e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 d52:	8b 77       	andi	r24, 0x7B	; 123
 d54:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 d58:	30 c0       	rjmp	.+96     	; 0xdba <USB_Device_ProcessControlRequest+0x292>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 d5a:	80 38       	cpi	r24, 0x80	; 128
 d5c:	71 f5       	brne	.+92     	; 0xdba <USB_Device_ProcessControlRequest+0x292>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d5e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 d62:	87 7f       	andi	r24, 0xF7	; 247
 d64:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
 d68:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <USB_Device_ConfigurationNumber>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
 d6c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 d70:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 d74:	8e 77       	andi	r24, 0x7E	; 126
 d76:	77 cf       	rjmp	.-274    	; 0xc66 <USB_Device_ProcessControlRequest+0x13e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 d78:	81 11       	cpse	r24, r1
 d7a:	1f c0       	rjmp	.+62     	; 0xdba <USB_Device_ProcessControlRequest+0x292>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 d7c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <USB_ControlRequest+0x2>
 d80:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <USB_ControlRequest+0x3>
 d84:	99 27       	eor	r25, r25
 d86:	02 97       	sbiw	r24, 0x02	; 2
 d88:	c4 f4       	brge	.+48     	; 0xdba <USB_Device_ProcessControlRequest+0x292>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 d8a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 d8e:	87 7f       	andi	r24, 0xF7	; 247
 d90:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 d94:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <USB_ControlRequest+0x2>
 d98:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <USB_Device_ConfigurationNumber>

	Endpoint_ClearStatusStage();
 d9c:	53 dd       	rcall	.-1370   	; 0x844 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
 d9e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <USB_Device_ConfigurationNumber>
 da2:	81 11       	cpse	r24, r1
 da4:	06 c0       	rjmp	.+12     	; 0xdb2 <USB_Device_ProcessControlRequest+0x28a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
 da6:	80 91 e3 00 	lds	r24, 0x00E3	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 daa:	87 fd       	sbrc	r24, 7
 dac:	02 c0       	rjmp	.+4      	; 0xdb2 <USB_Device_ProcessControlRequest+0x28a>
 dae:	81 e0       	ldi	r24, 0x01	; 1
 db0:	01 c0       	rjmp	.+2      	; 0xdb4 <USB_Device_ProcessControlRequest+0x28c>
 db2:	84 e0       	ldi	r24, 0x04	; 4
 db4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <USB_DeviceState>

	EVENT_USB_Device_ConfigurationChanged();
 db8:	30 da       	rcall	.-2976   	; 0x21a <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 dba:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
 dbe:	83 ff       	sbrs	r24, 3
 dc0:	0a c0       	rjmp	.+20     	; 0xdd6 <USB_Device_ProcessControlRequest+0x2ae>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 dc2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
 dc6:	87 7f       	andi	r24, 0xF7	; 247
 dc8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 dcc:	80 91 eb 00 	lds	r24, 0x00EB	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
 dd0:	80 62       	ori	r24, 0x20	; 32
 dd2:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
 dd6:	aa 96       	adiw	r28, 0x2a	; 42
 dd8:	0f b6       	in	r0, 0x3f	; 63
 dda:	f8 94       	cli
 ddc:	de bf       	out	0x3e, r29	; 62
 dde:	0f be       	out	0x3f, r0	; 63
 de0:	cd bf       	out	0x3d, r28	; 61
 de2:	df 91       	pop	r29
 de4:	cf 91       	pop	r28
 de6:	1f 91       	pop	r17
 de8:	08 95       	ret

00000dea <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 dea:	08 95       	ret

00000dec <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 dec:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
 dee:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <USB_DeviceState>
 df2:	88 23       	and	r24, r24
 df4:	99 f0       	breq	.+38     	; 0xe1c <USB_USBTask+0x30>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 df6:	c0 91 e9 00 	lds	r28, 0x00E9	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
 dfa:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
 dfc:	90 91 ec 00 	lds	r25, 0x00EC	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
 e00:	89 2f       	mov	r24, r25
 e02:	81 70       	andi	r24, 0x01	; 1
 e04:	90 fd       	sbrc	r25, 0
 e06:	80 e8       	ldi	r24, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
 e08:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 e0a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 e0e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>

	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
 e12:	83 fd       	sbrc	r24, 3
	  USB_Device_ProcessControlRequest();
 e14:	89 de       	rcall	.-750    	; 0xb28 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
 e16:	cf 70       	andi	r28, 0x0F	; 15
 e18:	c0 93 e9 00 	sts	0x00E9, r28	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
 e1c:	cf 91       	pop	r28
 e1e:	08 95       	ret

00000e20 <memcmp>:
 e20:	fb 01       	movw	r30, r22
 e22:	dc 01       	movw	r26, r24
 e24:	04 c0       	rjmp	.+8      	; 0xe2e <memcmp+0xe>
 e26:	8d 91       	ld	r24, X+
 e28:	01 90       	ld	r0, Z+
 e2a:	80 19       	sub	r24, r0
 e2c:	21 f4       	brne	.+8      	; 0xe36 <memcmp+0x16>
 e2e:	41 50       	subi	r20, 0x01	; 1
 e30:	50 40       	sbci	r21, 0x00	; 0
 e32:	c8 f7       	brcc	.-14     	; 0xe26 <memcmp+0x6>
 e34:	88 1b       	sub	r24, r24
 e36:	99 0b       	sbc	r25, r25
 e38:	08 95       	ret

00000e3a <_exit>:
 e3a:	f8 94       	cli

00000e3c <__stop_program>:
 e3c:	ff cf       	rjmp	.-2      	; 0xe3c <__stop_program>
